@startuml sd Main Process
header / sd / ReMoni Aeotec Multisensor 6 - Main

actor ReCalc

box "MQTT Process"
participant "MQTT\nClient" as mqtt
end box

database jsonfiles

box "Main Process"
entity Gateway
participant main
collections Multisensor
entity ZStick
end box

box "Aeotec Multisensor 6"
actor Multisensor_1
actor Multisensor_2
end box

== Setup : startup ==

autoactivate on

main -> Gateway : logger() 
return

main -> Gateway : check_inet_\nconnection()
return

main -> mqtt : mqtt_setup()

main -> ZStick : find_usb()
return

== Initialization : zwave ==
main -> ZStick : init()
return 
main -> ZStick : network_is_awake()
return True / False
main -> ZStick : scan_for_nodes()
autoactivate off
Multisensor_1 -> ZStick : hello<dict info>
Multisensor_2 -> ZStick : hello<dict info>
ZStick -> ZStick : get_multisensor_node_ids()
ZStick -> main : Multisensor_node_ids
deactivate

loop for node_ids
    main -> Multisensor : Multisensors[] = Multisensor(node_id, ...)
end
== Main Loop ==
loop While 1
loop for Multisensors[node_id] :\nNote: Shown for Multisensor 1 and 2 to illustate loop. Will loop through all node ids up to 232 Sensors
    autoactivate on

    Multisensor -> Multisensor_1 : is_awake()
    return True / False

    Multisensor -> Multisensor_1 : get_values()
    return values

    Multisensor -> Gateway : write_values_to_file()
    Gateway -> jsonfiles : write_values
    return
    return True / False
    Multisensor -> Multisensor_2 : is_awake()
    return True / False

    Multisensor -> Multisensor_2 : get_values()
    return values

    Multisensor -> Gateway : write_values_to_file()
    Gateway -> jsonfiles : write_values
    return
    return True / False
end
autoactivate off

...1 minute later...

autoactivate on
main -> ZStick : network_is_awake()
return True / False
main -> ZStick : scan_for_nodes()
autoactivate off

Multisensor_1 -> ZStick : hello<dict info>
Multisensor_2 -> ZStick : hello<dict info>
ZStick -> ZStick : get_multisensor_node_ids()
ZStick -> main : Multisensor_node_ids
deactivate ZStick
main -> main : compare new ids to old ids
main -> main : create or pop Sensor obejct in\nMultisensor[Multisensor(node_id)]
end

@enduml